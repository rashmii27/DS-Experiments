# -*- coding: utf-8 -*-
"""DS EXP7

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CgKcScTfwOTxv5FAO3IGQ5rzUsZBa-6w
"""

from sklearn.feature_selection import mutual_info_classif
from sklearn.datasets import load_iris
import pandas as pd

# Load sample data (Iris dataset)

data = load_iris()
X = pd.DataFrame(data.data, columns=data.feature_names)
y = data.target

# Calculate Information Gain (Mutual Information)

info_gain = mutual_info_classif(X, y)

# Display Information Gain for each feature

info_gain_df = pd.DataFrame({'Feature': X.columns, 'Information Gain': info_gain})
print(info_gain_df.sort_values(by='Information Gain', ascending=False))

#calculate chi-square

from sklearn.feature_selection import chi2
from sklearn.preprocessing import MinMaxScaler

# Normalize the data to [0,1] range before applying Chi-Square

scaler = MinMaxScaler()
X_scaled = scaler.fit_transform(X)

# Perform Chi-Square test

chi_scores, p_values = chi2(X_scaled, y)

# Display Chi-Square scores and p-values for each feature

chi2_df = pd.DataFrame({'Feature': data.feature_names, 'Chi-Square Score': chi_scores, 'p-value': p_values})
print(chi2_df.sort_values(by='Chi-Square Score', ascending=False))

#calculate pearson correlation

import numpy as np
import pandas as pd
from scipy.stats import pearsonr

# Load data into a pandas DataFrame

X_df = pd.DataFrame(X, columns=data.feature_names)

# Calculate Pearson Correlation for each feature with the target

pearson_results = []
for column in X_df.columns:
    corr, _ = pearsonr(X_df[column], y)
    pearson_results.append((column, corr))

# Display Pearson correlation for each feature

pearson_df = pd.DataFrame(pearson_results, columns=['Feature', 'Pearson Correlation'])
print(pearson_df.sort_values(by='Pearson Correlation', ascending=False))

